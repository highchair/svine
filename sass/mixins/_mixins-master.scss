// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	margin-left: auto;
	margin-right: auto;
}

// Full-width block
@mixin full-width() {
  margin-left: -$padding;
  margin-right: -$padding;
  padding-left: $padding;
  padding-right: $padding;
  width: auto; // reset

  @media screen and ($xlarge-up) {
    margin-left: calc(-100vw / 2 + #{$size__site-main} / 2 - #{$padding});
    margin-right: calc(-100vw / 2 + #{$size__site-main} / 2 - #{$padding});
  }
}

// Wrapper block
@mixin wrap() {
  margin-left: auto;
  margin-right: auto;
  max-width: $size__site-main;
  padding-left: $padding / 2;
  padding-right: $padding / 2;

  @media screen and ($xlarge-up) {
    padding-left: 0;
    padding-right: 0;
  }
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Fluid units

@function fluid-calc($min-value, $max-value, $min-vw: 30, $max-vw: 75, $unit: 1rem) {
  @return calc(#{$min-value * $unit} + (#{$max-value} - #{$min-value}) * ((100vw - #{$min-vw * $unit}) / #{$max-vw - $min-vw}));
}

@mixin fluid-units($properties, $min-value, $max-value, $min-vw: 30, $max-vw: 75, $unit: 1rem, $mobile: true) {

  /// Mobile-first: declare the $min-value as the default for any property passed
  @if ($mobile == true) {
    @each $property in $properties {
      #{$property}: #{$min-value * $unit};
    }
  }

  /// Now declare the creamy, fluid center using a media query at the min-width
  @media (min-width: #{$min-vw * $unit}) {
    @each $property in $properties {
      #{$property}: fluid-calc($min-value, $max-value, $min-vw, $max-vw, $unit);
    }
  }

  /// Finally, stop the crazy fluidity and set the max value at the max viewport width
  @media (min-width: #{$max-vw * $unit}) {
    @each $property in $properties {
      #{$property}: #{$max-value * $unit};
    }
  }
}


// Social Icons
@mixin social-icons($icons-only: false, $inline: true) {

  .text {
    display: inline-block;
    font-family: $font__main;
    font-size: 0.85rem;
    font-weight: bold;
    letter-spacing: 0.175em;
    text-decoration: none;
    text-transform: uppercase;
  }

  .icon {
    background-position-y: -1px;
    background-repeat: no-repeat;
    display: inline-block;
    margin-right: 0.25rem;
    vertical-align: middle;
  }

  .icon-facebook {
    background-image: url('../img/icon-facebook.svg');
  }

  .icon-linkedin {
    background-image: url('../img/icon-linkedin.svg');
  }

  .icon-instagram {
    background-image: url('../img/icon-instagram.svg');
  }

  @if ($icons-only == true) {

    .textwidget {
      align-items: center;
      display: flex;
    }

    .icon {
      width: 2rem;
    }

    .icon-facebook,
    .icon-linkedin {
      height: 1.75rem;
    }

    .icon-instagram {
      height: 2rem;
    }
  } @else {

    .icon {
      width: 1.65rem;
    }

    .icon-facebook,
    .icon-linkedin {
      height: 1.5rem;
    }

    .icon-instagram {
      height: 1.65rem;
    }
  }

  @if ($inline == true) {

    .widget_text {
      display: inline-block;
    }

    a {
      display: inline-block;
      margin-left: $padding;
    }
  }

} // social-icons()